---
title: "Введение в R"
format: 
  md:
    output-file: README.md
---

## Цель работы

 1. Развить практические навыки использования языка программирования R для
 обработки данных
 2. Развить навыки работы в Rstudio IDE:
 установка пакетов
 работа с проектами в Rstudio
 настройка и работа с Git
 3. Закрепить знания базовых типов данных языка R и простейших операций с ними

## Исходные данные

1. Rstudio Desktop
2. Наше рабочее окружение
       
## План

 Запустить подкурсы и выполнить:
  базовые структурные блоки (Basic Building Blocks)
  рабочие пространства и файлы (Workspace and Files)
  последовательности чисел (Sequences of Numbers)
  векторы (Vectors)
  пропущенные значения (Missing Values)    

## Шаги: 
sessionInfo()
R version 4.5.1 (2025-06-13 ucrt)
Platform: x86_64-w64-mingw32/x64
Running under: Windows 11 x64 (build 26100)

Matrix products: default
  LAPACK version 3.12.1

locale:
[1] LC_COLLATE=Russian_Russia.utf8  LC_CTYPE=Russian_Russia.utf8   
[3] LC_MONETARY=Russian_Russia.utf8 LC_NUMERIC=C                   
[5] LC_TIME=Russian_Russia.utf8    

time zone: Europe/Moscow
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
[1] compiler_4.5.1 tools_4.5.1   

## Basic Building Blocks

Type 5 + 7 and press Enter.

> 5 + 7
[1] 12

| To assign the result of 5 + 7 to a new variable called x, you type x <- 5 +
| 7. This can be read as 'x gets 5 plus 7'. Give it a try now.


```{r}
x <- 5 + 7
```

| You are amazing!

  |==============                                                      |  21%

| To view the contents of the variable x, just type x and press Enter. Try it
| now.

> x
[1] 12

| You nailed it! Good job!

  |==================                                                  |  26%
| Now, store the result of x - 3 in a new variable called y.

> y <- x - 3

| That's correct!

  |====================                                                |  29%
| What is the value of y? Type y to find out.

> y
[1] 9

| The easiest way to create a vector is with the c() function, which stands
| for 'concatenate' or 'combine'. To create a vector containing the numbers
| 1.1, 9, and 3.14, type c(1.1, 9, 3.14). Try it now and store the result in
| a variable called z.

> c(1.1, 9, 3.14)
[1] 1.10 9.00 3.14


| Inputting z <- c(1.1, 9, 3.14) will assign the vector (1.1, 9, 3.14) to a
| new variable called z. Including single spaces after the commas in the
| vector is not required, but helps make your code less cluttered and more
| readable.

> z <- c(1.1, 9, 3.14)

| That's the answer I was looking for.

  |=========================                                           |  37%
| Anytime you have questions about a particular function, you can access R's
| built-in help files via the `?` command. For example, if you want more
| information on the c() function, type ?c without the parentheses that
| normally follow a function name. Give it a try.

> ?c

| All that hard work is paying off!

  |===========================                                         |  39%
| Type z to view its contents. Notice that there are no commas separating the
| values in the output.

> z
[1] 1.10 9.00 3.14

| You got it!

  |=============================                                       |  42%
| You can combine vectors to make a new vector. Create a new vector that
| contains z, 555, then z again in that order. Don't assign this vector to a
| new variable, so that we can just see the result immediately.

> c(z, 555, z)
[1]   1.10   9.00   3.14 555.00   1.10   9.00   3.14

| That's correct!

  |==============================                                      |  45%
| Numeric vectors can be used in arithmetic expressions. Type the following
| to see what happens: z * 2 + 100.

> z * 2 + 100
[1] 102.20 118.00 106.28

| Excellent work!

  |================================                                    |  47%
  
| Take the square root of z - 1 and assign it to a new variable called
| my_sqrt.

> my_sqrt <- sqrt(z-1)

| You are doing so well!

  |======================================                              |  55%
| Before we view the contents of the my_sqrt variable, what do you think it
| contains?

1: a vector of length 3
2: a vector of length 0 (i.e. an empty vector)
3: a single number (i.e a vector of length 1)

Выбор: 1

| Great job!

  |=======================================                             |  58%
| Print the contents of my_sqrt.

> my_sqrt
[1] 0.3162278 2.8284271 1.4628739

| Now, create a new variable called my_div that gets the value of z divided
| by my_sqrt.

> my_div <- z/my_sqrt

| You got it right!

  |=============================================                       |  66%
| Which statement do you think is true?

1: my_div is undefined
2: my_div is a single number (i.e a vector of length 1)
3: The first element of my_div is equal to the first element of z divided by the first element of my_sqrt, and so on...

Выбор: 3

| Keep working like that and you'll get there!

  |===============================================                     |  68%
| Go ahead and print the contents of my_div.

> my_div
[1] 3.478505 3.181981 2.146460

| To see another example of how this vector 'recycling' works, try adding
| c(1, 2, 3, 4) and c(0, 10). Don't worry about saving the result in a new
| variable.

> 
> c(1, 2, 3, 4) + c(0, 10)
[1]  1 12  3 14

| Try c(1, 2, 3, 4) + c(0, 10, 100) for an example.

> c(1, 2, 3, 4) + c(0, 10, 100)
[1]   1  12 103   4
Предупреждение:
В c(1, 2, 3, 4) + c(0, 10, 100) :
  длина большего объекта не является произведением длины меньшего объекта

| That's the answer I was looking for.

  |===========================================================         |  87%
  
| In many programming environments, the up arrow will cycle through previous
| commands. Try hitting the up arrow on your keyboard until you get to this
| command (z * 2 + 100), then change 100 to 1000 and hit Enter. If the up
| arrow doesn't work for you, just type the corrected command.

> z * 2 + 1000
[1] 1002.20 1018.00 1006.28

| You can type the first two letters of the variable name, then hit the Tab
| key (possibly more than once). Most programming environments will provide a
| list of variables that you've created that begin with 'my'. This is called
| auto-completion and can be quite handy when you have many variables in your
| workspace. Give it a try. (If auto-completion doesn't work for you, just
| type my_div and press Enter.)

> my_div
[1] 3.478505 3.181981 2.146460

| Nice work!

  |====================================================================| 100%
